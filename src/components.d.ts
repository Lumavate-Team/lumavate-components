/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface LumavateCarousel {
      'arrowColor': string;
      'carouselImages': string;
      'displayDots': boolean;
      'lowerLightboxIcons': boolean;
      'mode': string;
    }
  }

  interface HTMLLumavateCarouselElement extends StencilComponents.LumavateCarousel, HTMLStencilElement {}

  var HTMLLumavateCarouselElement: {
    prototype: HTMLLumavateCarouselElement;
    new (): HTMLLumavateCarouselElement;
  };
  interface HTMLElementTagNameMap {
    'lumavate-carousel': HTMLLumavateCarouselElement;
  }
  interface ElementTagNameMap {
    'lumavate-carousel': HTMLLumavateCarouselElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lumavate-carousel': JSXElements.LumavateCarouselAttributes;
    }
  }
  namespace JSXElements {
    export interface LumavateCarouselAttributes extends HTMLAttributes {
      'arrowColor'?: string;
      'carouselImages'?: string;
      'displayDots'?: boolean;
      'lowerLightboxIcons'?: boolean;
      'mode'?: string;
      'onClicked'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LumavateDisclosure {
      'buttonColor': string;
      'buttonText': string;
      'buttonTextColor': string;
      'buttonTextFont': string;
      'close': () => void;
      'disclosureBackgroundColor': string;
      'disclosureText': string;
      'disclosureTextColor': string;
      'disclosureTextFont': string;
      'link1': string;
      'link1Text': string;
      'link1TextColor': string;
      'link2': string;
      'link2Text': string;
      'link2TextColor': string;
      'link3': string;
      'link3Text': string;
      'link3TextColor': string;
    }
  }

  interface HTMLLumavateDisclosureElement extends StencilComponents.LumavateDisclosure, HTMLStencilElement {}

  var HTMLLumavateDisclosureElement: {
    prototype: HTMLLumavateDisclosureElement;
    new (): HTMLLumavateDisclosureElement;
  };
  interface HTMLElementTagNameMap {
    'lumavate-disclosure': HTMLLumavateDisclosureElement;
  }
  interface ElementTagNameMap {
    'lumavate-disclosure': HTMLLumavateDisclosureElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lumavate-disclosure': JSXElements.LumavateDisclosureAttributes;
    }
  }
  namespace JSXElements {
    export interface LumavateDisclosureAttributes extends HTMLAttributes {
      'buttonColor'?: string;
      'buttonText'?: string;
      'buttonTextColor'?: string;
      'buttonTextFont'?: string;
      'disclosureBackgroundColor'?: string;
      'disclosureText'?: string;
      'disclosureTextColor'?: string;
      'disclosureTextFont'?: string;
      'link1'?: string;
      'link1Text'?: string;
      'link1TextColor'?: string;
      'link2'?: string;
      'link2Text'?: string;
      'link2TextColor'?: string;
      'link3'?: string;
      'link3Text'?: string;
      'link3TextColor'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LumavateHeader {
      'BackgroundColor': string;
      'FontColor': string;
      'ShowBackButton': boolean;
      'Text': string;
      'showBackButton': () => void;
    }
  }

  interface HTMLLumavateHeaderElement extends StencilComponents.LumavateHeader, HTMLStencilElement {}

  var HTMLLumavateHeaderElement: {
    prototype: HTMLLumavateHeaderElement;
    new (): HTMLLumavateHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'lumavate-header': HTMLLumavateHeaderElement;
  }
  interface ElementTagNameMap {
    'lumavate-header': HTMLLumavateHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lumavate-header': JSXElements.LumavateHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface LumavateHeaderAttributes extends HTMLAttributes {
      'BackgroundColor'?: string;
      'FontColor'?: string;
      'ShowBackButton'?: boolean;
      'Text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LumavateImage {
      'mode': string;
      'src': string;
    }
  }

  interface HTMLLumavateImageElement extends StencilComponents.LumavateImage, HTMLStencilElement {}

  var HTMLLumavateImageElement: {
    prototype: HTMLLumavateImageElement;
    new (): HTMLLumavateImageElement;
  };
  interface HTMLElementTagNameMap {
    'lumavate-image': HTMLLumavateImageElement;
  }
  interface ElementTagNameMap {
    'lumavate-image': HTMLLumavateImageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lumavate-image': JSXElements.LumavateImageAttributes;
    }
  }
  namespace JSXElements {
    export interface LumavateImageAttributes extends HTMLAttributes {
      'mode'?: string;
      'src'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LumavateMap {
      'address': string;
      'key': string;
      'zoom': string;
    }
  }

  interface HTMLLumavateMapElement extends StencilComponents.LumavateMap, HTMLStencilElement {}

  var HTMLLumavateMapElement: {
    prototype: HTMLLumavateMapElement;
    new (): HTMLLumavateMapElement;
  };
  interface HTMLElementTagNameMap {
    'lumavate-map': HTMLLumavateMapElement;
  }
  interface ElementTagNameMap {
    'lumavate-map': HTMLLumavateMapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lumavate-map': JSXElements.LumavateMapAttributes;
    }
  }
  namespace JSXElements {
    export interface LumavateMapAttributes extends HTMLAttributes {
      'address'?: string;
      'key'?: string;
      'zoom'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LumavateNavBarItem {
      'NavBarItemColor': string;
      'NavBarItemImageLink': string;
      'NavBarItemLink': string;
      'NavBarItemText': string;
    }
  }

  interface HTMLLumavateNavBarItemElement extends StencilComponents.LumavateNavBarItem, HTMLStencilElement {}

  var HTMLLumavateNavBarItemElement: {
    prototype: HTMLLumavateNavBarItemElement;
    new (): HTMLLumavateNavBarItemElement;
  };
  interface HTMLElementTagNameMap {
    'lumavate-nav-bar-item': HTMLLumavateNavBarItemElement;
  }
  interface ElementTagNameMap {
    'lumavate-nav-bar-item': HTMLLumavateNavBarItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lumavate-nav-bar-item': JSXElements.LumavateNavBarItemAttributes;
    }
  }
  namespace JSXElements {
    export interface LumavateNavBarItemAttributes extends HTMLAttributes {
      'NavBarItemColor'?: string;
      'NavBarItemImageLink'?: string;
      'NavBarItemLink'?: string;
      'NavBarItemText'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LumavateNavBar {
      'NavBarBackgroundColor': string;
      'NavBarItemColor': string;
      'NavBarItems': string;
      'NavBarPosition': string;
    }
  }

  interface HTMLLumavateNavBarElement extends StencilComponents.LumavateNavBar, HTMLStencilElement {}

  var HTMLLumavateNavBarElement: {
    prototype: HTMLLumavateNavBarElement;
    new (): HTMLLumavateNavBarElement;
  };
  interface HTMLElementTagNameMap {
    'lumavate-nav-bar': HTMLLumavateNavBarElement;
  }
  interface ElementTagNameMap {
    'lumavate-nav-bar': HTMLLumavateNavBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lumavate-nav-bar': JSXElements.LumavateNavBarAttributes;
    }
  }
  namespace JSXElements {
    export interface LumavateNavBarAttributes extends HTMLAttributes {
      'NavBarBackgroundColor'?: string;
      'NavBarItemColor'?: string;
      'NavBarItems'?: string;
      'NavBarPosition'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
